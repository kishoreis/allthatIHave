
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;

/**
 *
 * @author kishora
 */
public class NewJFrame1 extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame1
     */
    public NewJFrame1() {
        
        initComponents();jTextField2.setEditable(false);
        jTextField1.setEditable(false);
        fill();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Disk Space Viewer");

        jPanel1.setBackground(new java.awt.Color(14, 11, 7));

        jPanel2.setBackground(new java.awt.Color(20, 17, 14));

        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 25, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBackground(new java.awt.Color(122, 113, 113));
        jPanel3.setForeground(new java.awt.Color(253, 243, 243));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(17, 9, 9));
        jLabel1.setText("PERMISSIONS");

        jCheckBox1.setBackground(new java.awt.Color(244, 240, 236));
        jCheckBox1.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jCheckBox1.setForeground(new java.awt.Color(23, 11, 11));
        jCheckBox1.setText("execute");
        jCheckBox1.setEnabled(false);

        jCheckBox2.setBackground(new java.awt.Color(244, 240, 236));
        jCheckBox2.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jCheckBox2.setForeground(new java.awt.Color(23, 11, 11));
        jCheckBox2.setText("read");
        jCheckBox2.setEnabled(false);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jCheckBox3.setBackground(new java.awt.Color(244, 240, 236));
        jCheckBox3.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jCheckBox3.setForeground(new java.awt.Color(23, 11, 11));
        jCheckBox3.setText("write");
        jCheckBox3.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(22, 8, 8));
        jLabel2.setText("FILE TYPE");

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(122, 113, 113));
        jTextField1.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(14, 4, 4));
        jTextField1.setBorder(null);

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(15, 11, 11));
        jLabel3.setText("SPACE OCCUPIED");

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(122, 113, 113));
        jTextField2.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(14, 4, 4));
        jTextField2.setBorder(null);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox3)
                                    .addComponent(jCheckBox2)
                                    .addComponent(jCheckBox1))
                                .addGap(34, 34, 34)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox3)
                .addGap(12, 12, 12)
                .addComponent(jCheckBox1)
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        DefaultMutableTreeNode node =
                        (DefaultMutableTreeNode)evt.getPath().getLastPathComponent();
        this.fillAgain(node);
    }//GEN-LAST:event_jTree1ValueChanged

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame1().setVisible(true);
            }
        });
    }
private FileSystemView fileSystemView;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    private void fillAgain(DefaultMutableTreeNode node){
        jTree1.setEnabled(false);
        jCheckBox1.setEnabled(true);jCheckBox1.setSelected(false);jCheckBox1.setEnabled(false);
        jCheckBox2.setEnabled(true);jCheckBox2.setSelected(false);jCheckBox2.setEnabled(false);
        jCheckBox3.setEnabled(true);jCheckBox3.setSelected(false);jCheckBox3.setEnabled(false);
        jTextField1.setEditable(true); jTextField1.setText("");jTextField1.setEditable(false);
        jTextField2.setEditable(true); jTextField2.setText("");jTextField2.setEditable(false);
            fileSystemView = new JFileChooser().getFileSystemView();
            try{
                DefaultMutableTreeNode z=node;
            String pathName="";
            pathName=z.toString().substring(0,z.toString().indexOf("("));
                        z=(DefaultMutableTreeNode)z.getParent();
                    while(!z.isRoot()){
                        if(z.toString().substring(0,z.toString().indexOf("(")).equals("/"))
                        pathName=z.toString().substring(0,z.toString().indexOf("("))+""+pathName;
                        else pathName=z.toString().substring(0,z.toString().indexOf("("))+"/"+pathName;
                        z=(DefaultMutableTreeNode)z.getParent();
                    }
                    //System.out.println(pathName);
                    File f = new File(pathName);
                   if(f.canExecute()) {jCheckBox1.setEnabled(true);jCheckBox1.setSelected(true);jCheckBox1.setEnabled(false);}
                   if(f.canRead()) {jCheckBox2.setEnabled(true);jCheckBox2.setSelected(true);jCheckBox2.setEnabled(false);}
                   if(f.canWrite()) {jCheckBox3.setEnabled(true);jCheckBox3.setSelected(true);jCheckBox3.setEnabled(false);}
                 if(f.isFile())  {jTextField1.setEditable(true); jTextField1.setText(FilenameUtils.getExtension(f.getAbsolutePath()));jTextField1.setEditable(false);
                 float mm =(float)FileUtils.sizeOf(new File(f.getAbsolutePath()))/(1024*1024);  
                 jTextField2.setEditable(true); jTextField2.setText(mm+" Mega Bytes");jTextField2.setEditable(false);}
                 if(f.isDirectory()){
                     float mn =(float)FileUtils.sizeOf(new File(f.getAbsolutePath()))/(1024*1024*1024);  
                 jTextField2.setEditable(true); jTextField2.setText(mn+" Giga Bytes");jTextField2.setEditable(false);}
                   File[] roots =fileSystemView.getFiles(f,true);
            for (File fileSystemRoot : roots) {
                float m =(float)FileUtils.sizeOf(new File(fileSystemRoot.getAbsolutePath()))/(1024*1024);String x=fileSystemRoot.getName();
                if(fileSystemRoot.isDirectory()){ x=fileSystemRoot.getName()+"("+m*1024+"GB)";} else{ x=fileSystemRoot.getName()+"("+m+"MB)";}
                DefaultMutableTreeNode nodew = new DefaultMutableTreeNode(x);
                node.add( nodew );
                
                File[] files = fileSystemView.getFiles(fileSystemRoot, true);
                for (File file : files) {
                    if (file.isDirectory()) {
                        float zz = (float)FileUtils.sizeOfDirectory(new File(file.getAbsolutePath()))/(1024*1024);
                        String c=file.getName()+"(("+zz+"MB))";
                        DefaultMutableTreeNode node1=new DefaultMutableTreeNode(c);
                        nodew.add(node1);
                        File[] filew = fileSystemView.getFiles(file,true);
                        for (File filex : filew) {
                            if (filex.isDirectory()) {
                        float zw = (float)FileUtils.sizeOfDirectory(new File(filex.getAbsolutePath()))/(1024*1024);
                        String cw=filex.getName()+"(("+zw+"MB))";
                        
                        node1.add(new DefaultMutableTreeNode(cw));
                        //System.out.println(cw);
                        
                    }
                    //else if(filex.isFile()) node.add(new DefaultMutableTreeNode(file.getName()));
                }
                        
                    }
                    //else if(file.isFile()) node.add(new DefaultMutableTreeNode(file.getName()));
                }
                //
            }}
       catch(Exception e){System.out.println(e);}
         jTree1.setEnabled(true);   
    }
    private void fill() {
        fileSystemView = new JFileChooser().getFileSystemView();
 //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        //DefaultMutableTreeNode root = new DefaultMutableTreeNode("root");
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("/");
           DefaultTreeModel treeModel = new DefaultTreeModel(root);
       try{ File[] roots = fileSystemView.getRoots();
            for (File fileSystemRoot : roots) {
                String x=fileSystemRoot.getName()+"("+(fileSystemRoot.getUsableSpace()/(1024*1024*1024))+"GB)";
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(x);
                root.add( node );
                File[] files = fileSystemView.getFiles(fileSystemRoot, true);
                for (File file : files) {
                    if (file.isDirectory()) {
                        float zz = (float)FileUtils.sizeOfDirectory(new File(file.getAbsolutePath()))/(1024*1024*1024);
                        String c=file.getName()+"("+zz+"GB)";
                        DefaultMutableTreeNode node1=new DefaultMutableTreeNode(c);
                        node.add(node1);
                        //System.out.println();
                        File[] filew = fileSystemView.getFiles(file,true);
                        for (File filex : filew) {
                            if (filex.isDirectory()) {
                        float zw = (float)FileUtils.sizeOfDirectory(new File(filex.getAbsolutePath()))/(1024*1024);
                        String cw=filex.getName()+"("+zw+"MB)";
                        
                        node1.add(new DefaultMutableTreeNode(cw));
                        //System.out.println(node1.toString()+" "+node1.getParent().toString());
                        
                    }
                    //else if(filex.isFile()) node.add(new DefaultMutableTreeNode(file.getName()));
                }
                        
                    }
                    //else if(file.isFile()) node.add(new DefaultMutableTreeNode(file.getName()));
                }
                //
            }}
       catch(Exception e){System.out.println(e);}
        
        //DefaultTreeModel dmt = new DefaultTreeModel(root);
        this.jTree1.setModel(treeModel);
        jTree1.setRootVisible(false);
        
    }
}
